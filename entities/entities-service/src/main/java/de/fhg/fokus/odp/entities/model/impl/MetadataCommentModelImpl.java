/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.fhg.fokus.odp.entities.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import de.fhg.fokus.odp.entities.model.MetadataComment;
import de.fhg.fokus.odp.entities.model.MetadataCommentModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MetadataComment service. Represents a row in the &quot;entities_MetadataComment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MetadataCommentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MetadataCommentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MetadataCommentImpl
 * @generated
 */
public class MetadataCommentModelImpl
	extends BaseModelImpl<MetadataComment> implements MetadataCommentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a metadata comment model instance should use the <code>MetadataComment</code> interface instead.
	 */
	public static final String TABLE_NAME = "entities_MetadataComment";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"_id", Types.BIGINT},
		{"userLiferayId", Types.BIGINT}, {"metadataName", Types.VARCHAR},
		{"text_", Types.VARCHAR}, {"created", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userLiferayId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("metadataName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("text_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("created", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table entities_MetadataComment (uuid_ VARCHAR(75) null,_id LONG not null primary key,userLiferayId LONG,metadataName VARCHAR(75) null,text_ VARCHAR(75) null,created DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table entities_MetadataComment";

	public static final String ORDER_BY_JPQL =
		" ORDER BY metadataComment.created ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY entities_MetadataComment.created ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long METADATANAME_COLUMN_BITMASK = 1L;

	public static final long USERLIFERAYID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long CREATED_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public MetadataCommentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return __id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		set_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return __id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MetadataComment.class;
	}

	@Override
	public String getModelClassName() {
		return MetadataComment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MetadataComment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MetadataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetadataComment, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MetadataComment)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MetadataComment, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MetadataComment, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MetadataComment)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MetadataComment, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MetadataComment, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MetadataComment>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MetadataComment.class.getClassLoader(), MetadataComment.class,
			ModelWrapper.class);

		try {
			Constructor<MetadataComment> constructor =
				(Constructor<MetadataComment>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<MetadataComment, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MetadataComment, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MetadataComment, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<MetadataComment, Object>>();
		Map<String, BiConsumer<MetadataComment, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MetadataComment, ?>>();

		attributeGetterFunctions.put("uuid", MetadataComment::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<MetadataComment, String>)MetadataComment::setUuid);
		attributeGetterFunctions.put("_id", MetadataComment::get_id);
		attributeSetterBiConsumers.put(
			"_id", (BiConsumer<MetadataComment, Long>)MetadataComment::set_id);
		attributeGetterFunctions.put(
			"userLiferayId", MetadataComment::getUserLiferayId);
		attributeSetterBiConsumers.put(
			"userLiferayId",
			(BiConsumer<MetadataComment, Long>)
				MetadataComment::setUserLiferayId);
		attributeGetterFunctions.put(
			"metadataName", MetadataComment::getMetadataName);
		attributeSetterBiConsumers.put(
			"metadataName",
			(BiConsumer<MetadataComment, String>)
				MetadataComment::setMetadataName);
		attributeGetterFunctions.put("text", MetadataComment::getText);
		attributeSetterBiConsumers.put(
			"text",
			(BiConsumer<MetadataComment, String>)MetadataComment::setText);
		attributeGetterFunctions.put("created", MetadataComment::getCreated);
		attributeSetterBiConsumers.put(
			"created",
			(BiConsumer<MetadataComment, Date>)MetadataComment::setCreated);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long get_id() {
		return __id;
	}

	@Override
	public void set_id(long _id) {
		__id = _id;
	}

	@Override
	public long getUserLiferayId() {
		return _userLiferayId;
	}

	@Override
	public void setUserLiferayId(long userLiferayId) {
		_columnBitmask |= USERLIFERAYID_COLUMN_BITMASK;

		if (!_setOriginalUserLiferayId) {
			_setOriginalUserLiferayId = true;

			_originalUserLiferayId = _userLiferayId;
		}

		_userLiferayId = userLiferayId;
	}

	public long getOriginalUserLiferayId() {
		return _originalUserLiferayId;
	}

	@Override
	public String getMetadataName() {
		if (_metadataName == null) {
			return "";
		}
		else {
			return _metadataName;
		}
	}

	@Override
	public void setMetadataName(String metadataName) {
		_columnBitmask |= METADATANAME_COLUMN_BITMASK;

		if (_originalMetadataName == null) {
			_originalMetadataName = _metadataName;
		}

		_metadataName = metadataName;
	}

	public String getOriginalMetadataName() {
		return GetterUtil.getString(_originalMetadataName);
	}

	@Override
	public String getText() {
		if (_text == null) {
			return "";
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		_text = text;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_columnBitmask = -1L;

		_created = created;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MetadataComment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MetadataComment toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MetadataComment>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MetadataCommentImpl metadataCommentImpl = new MetadataCommentImpl();

		metadataCommentImpl.setUuid(getUuid());
		metadataCommentImpl.set_id(get_id());
		metadataCommentImpl.setUserLiferayId(getUserLiferayId());
		metadataCommentImpl.setMetadataName(getMetadataName());
		metadataCommentImpl.setText(getText());
		metadataCommentImpl.setCreated(getCreated());

		metadataCommentImpl.resetOriginalValues();

		return metadataCommentImpl;
	}

	@Override
	public int compareTo(MetadataComment metadataComment) {
		int value = 0;

		value = DateUtil.compareTo(getCreated(), metadataComment.getCreated());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MetadataComment)) {
			return false;
		}

		MetadataComment metadataComment = (MetadataComment)obj;

		long primaryKey = metadataComment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MetadataCommentModelImpl metadataCommentModelImpl = this;

		metadataCommentModelImpl._originalUuid = metadataCommentModelImpl._uuid;

		metadataCommentModelImpl._originalUserLiferayId =
			metadataCommentModelImpl._userLiferayId;

		metadataCommentModelImpl._setOriginalUserLiferayId = false;

		metadataCommentModelImpl._originalMetadataName =
			metadataCommentModelImpl._metadataName;

		metadataCommentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MetadataComment> toCacheModel() {
		MetadataCommentCacheModel metadataCommentCacheModel =
			new MetadataCommentCacheModel();

		metadataCommentCacheModel.uuid = getUuid();

		String uuid = metadataCommentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			metadataCommentCacheModel.uuid = null;
		}

		metadataCommentCacheModel._id = get_id();

		metadataCommentCacheModel.userLiferayId = getUserLiferayId();

		metadataCommentCacheModel.metadataName = getMetadataName();

		String metadataName = metadataCommentCacheModel.metadataName;

		if ((metadataName != null) && (metadataName.length() == 0)) {
			metadataCommentCacheModel.metadataName = null;
		}

		metadataCommentCacheModel.text = getText();

		String text = metadataCommentCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			metadataCommentCacheModel.text = null;
		}

		Date created = getCreated();

		if (created != null) {
			metadataCommentCacheModel.created = created.getTime();
		}
		else {
			metadataCommentCacheModel.created = Long.MIN_VALUE;
		}

		return metadataCommentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MetadataComment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MetadataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetadataComment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MetadataComment)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MetadataComment, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MetadataComment, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MetadataComment, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MetadataComment)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MetadataComment>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long __id;
	private long _userLiferayId;
	private long _originalUserLiferayId;
	private boolean _setOriginalUserLiferayId;
	private String _metadataName;
	private String _originalMetadataName;
	private String _text;
	private Date _created;
	private long _columnBitmask;
	private MetadataComment _escapedModel;

}